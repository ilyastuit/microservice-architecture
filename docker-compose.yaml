version: '3.6'

services:

  resource-processor:
    build:
      context: ./resource-processor
      dockerfile: docker/dev/Dockerfile
    container_name: resource-processor
    ports:
      - "8080:8080"
    links:
      - kafka:kafka
    depends_on:
      - kafka
      - zookeeper
    networks:
      - app_network

  song-service:
    build:
      context: ./song-service
      dockerfile: docker/dev/Dockerfile
    ports:
      - "8081:8081"
    links:
      - song-database:song-database
      - kafka:kafka
    depends_on:
      - localstack
      - zookeeper
      - kafka
      - song-database
    networks:
      - app_network

  resource-service:
    build:
      context: ./resource-service
      dockerfile: docker/dev/Dockerfile
    links:
      - resource-database:resource-database
    ports:
      - "8082:8082"
    depends_on:
      - resource-database
    networks:
      - app_network

  localstack:
    container_name: localstack
    image: localstack/localstack:0.12.19
    environment:
      - DEBUG=1
      - LOCALSTACK_HOSTNAME=localhost
      - TEST_AWS_ACCOUNT_ID=000000000000
      - AWS_DEFAULT_REGION=us-west-2
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DATA_DIR=/tmp/localstack/data
      - KINESIS_STREAM_SHARDS=1
      - KINESIS_ERROR_PROBABILITY=0.0
      - KINESIS_STREAM_NAME=kinesis-stream
      - KINESIS_PROVIDER=kinesalite
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SKIP_SSL_CERT_DOWNLOAD=1
    ports:
      - "4566:4566"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/aws/scripts:/docker-entrypoint-initaws.d
    networks:
      - app_network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app_network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    links:
      - zookeeper:zookeeper
    environment:
      KAFKA_LISTENERS: DOCKER_NET://0.0.0.0:9093,HOST_NET://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER_NET://kafka:9093,HOST_NET://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_NET:PLAINTEXT,HOST_NET:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_NET
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "resources:1:1"
    networks:
      - app_network

  resource-database:
    container_name: resource-database
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_DB=resources
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '54321:5432'
    volumes:
      - db1:/var/lib/postgresql/data
    networks:
      - app_network

  song-database:
    container_name: song-database
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_DB=songs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '54322:5432'
    volumes:
      - db2:/var/lib/postgresql/data
    networks:
      - app_network

networks:
  app_network:

volumes:
  db1:
    driver: local
  db2:
    driver: local